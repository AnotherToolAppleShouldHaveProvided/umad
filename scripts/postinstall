#!/usr/bin/python
# encoding: utf-8
#
# Copyright 2018 Erik Gomez.
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''Loads the UMAD LaunchAgent and LaunchDaemons'''
import os
import subprocess
import sys
from SystemConfiguration import SCDynamicStoreCopyConsoleUser


def getconsoleuser():
    '''get console user'''
    cfuser = SCDynamicStoreCopyConsoleUser(None, None, None)
    return cfuser


def launchctl(*arg):
    '''Use *arg to pass unlimited variables to command'''
    cmd = ['/bin/launchctl'] + list(arg)
    run = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = run.communicate()
    return output


def main(argv):
    '''main postinstall script'''
    target = argv[3]
    # Make the Log path 777 to cheat - do this before loading LaunchAgent
    umad_log_path = os.path.join(target,
                                 'Library/Application Support/umad/Logs')
    os.chmod(umad_log_path, 0o777)

    lapath = os.path.join(target, 'Library', 'LaunchAgents',
                          'com.erikng.umad.plist')
    ldpath1 = os.path.join(target, 'Library', 'LaunchDaemons',
                           'com.erikng.umad.check_dep_record.plist')
    ldpath2 = os.path.join(target, 'Library', 'LaunchDaemons',
                           'com.erikng.umad.trigger_nag.plist')
    # Fail the install if the admin forgets to change their paths and they
    # don't exist
    for item in [lapath, ldpath1, ldpath2]:
        if os.path.isfile(item):
            pass
        else:
            print 'File does not exist: %s' % item
            sys.exit(1)

    # Load agents and daemons if installing to a running system
    if target == '/':
        currentuseruid = getconsoleuser()
        current_user_uid = str(currentuseruid[1])

        agents = [
            'com.erikng.umad'
        ]
        daemons = [
            'com.erikng.umad.check_dep_record',
            'com.erikng.umad.trigger_nag'
        ]

        # Get the list of launch agents and daemons
        launch_daemons = launchctl('list')
        # This is a deprecated command, but until Apple kills it, it is going
        # to be used
        launch_agents = launchctl('asuser', current_user_uid, '/bin/launchctl',
                                  'list')

        # Now let's loop through the list
        all_agents = [launch_agents, launch_daemons]
        all_loaded_agents = {}
        for index, agent in enumerate(all_agents):
            loaded_agents = []
            for loaded_agent in agent.split('\n'):
                tabbed_output = loaded_agent.split('\t')
                loaded_agents.append(tabbed_output[-1])
            if index == 0:
                all_loaded_agents['launch_agents'] = loaded_agents
            else:
                all_loaded_agents['launch_daemons'] = loaded_agents

        for item in daemons:
            if item in all_loaded_agents['launch_daemons']:
                launchctl('unload', os.path.join(target, 'Library',
                                                 'LaunchDaemons',
                                                 item + '.plist'))
        launchctl('load', ldpath1)
        launchctl('load', ldpath2)
        if (currentuseruid[0] is None or currentuseruid[0] == u'loginwindow'
                or currentuseruid[0] == u'_mbsetupuser'):
            pass
        else:
            for item in agents:
                # Unload the agent so it can be triggered on re-install
                if item in all_loaded_agents['launch_agents']:
                    launchctl('asuser', current_user_uid, '/bin/launchctl',
                              'unload', lapath)
            launchctl('asuser', current_user_uid, '/bin/launchctl', 'load',
                      lapath)


if __name__ == '__main__':
    main(sys.argv)
